@using Book.Models
@model Book.Models.dbbookEntities

@{
    ViewBag.Title = "CATEGORY MANAGEMENT";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    //Layout = null;
}

@*<!doctype html>

<html>
<head>
    
    
</head>
<body>
    <div class="row">

        <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2" style="height:900px">

            <div style="width:100%; background-color:#d36e25; height:900px" class="container list-group" >

                <div class="list-group-item">
                    @Html.ActionLink("Index", "Index", new { @class = "list-group-item" })
                </div>

                <div class="list-group-item">
                    @Html.ActionLink("Category", "CategoryManagement", new { @class = "list-group-item" })
                </div>

                <div class="list-group-item">
                    @Html.ActionLink("Publisher", "ShowPublisher", new { @class = "list-group-item" })
                </div>

                <div class="list-group-item">
                    @Html.ActionLink("Author", "ShowAuthor",  new { @class = "list-group-item" })
                </div>

                <div class="list-group-item">
                    @Html.ActionLink("Book", "ShowBook",  new { @class = "list-group-item" })
                </div>

                <div class="list-group-item">
                    @Html.ActionLink("Order", "ShowOrder", new { @class = "list-group-item" })
                </div>

                <br />
                <div>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Html.ActionLink("Log out", "Logout", "Account")
                </div>

            </div>

        </div>

        <div class="col-lg-10 col-md-10 col-sm-10 col-xs-10" style="height:900px">*@

            <meta name="viewport" content="width=device-width" />
            <title>Admin - Category</title>
            <link href="~/Content/bootstrap.css" rel="stylesheet" />
            <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
            <link rel="stylesheet" type="text/css" href="~/Content/DataTables/css/dataTables.bootstrap.css" />
            <link href="https://cdn.jsdelivr.net/npm/jquery-smarttab@3/dist/css/smart_tab_all.min.css" rel="stylesheet" type="text/css" />

            <br />

            <div id="CategoryManagement" class="form-group">
                <div>
                    <button id="addNewCateg" class="btn btn-default" style="background-color:#d36e25; color:white">New Category</button>
                </div>
                <div>
                    <table id="categories" class="table	table-bordered	table-hover">
                        <thead>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>

                <div id="dialogCategory" class="form-group table-bordered" style="display:none;">
                    <form id="formCategory" role="form">
                        <div class="form-group">
                            <label for="name">Name:</label>
                            <input id="categorys-name" class="form-control" name="name" type="text" placeholder="Enter name">
                        </div>
                    </form>
                </div>
            </div>

            <script src="~/Scripts/jquery-3.4.1.js"></script>
            <script src="~/Scripts/bootstrap.js"></script>
            <script src="~/Scripts/bootbox.js"></script>
            <script src="~/Scripts/DataTables/jquery.dataTables.js"></script>
            <script src="~/Scripts/DataTables/dataTables.bootstrap.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/jquery-smarttab@3/dist/js/jquery.smartTab.min.js" type="text/javascript"></script>
            <script src="~/Scripts/jquery-ui.js"></script>
            <script src="~/Scripts/DataTables/dataTables.scroller.js"></script>
            <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.1/jquery.validate.min.js"></script>


            <script>
                $(document).ready(function () {
                    var table;
                    var columns = [
                        {
                            title: "Category's ID",
                            data: "CategoryID",
                            render: function (data) {
                                return data;
                            }
                        },
                        {
                            title: "Category's Name",
                            data: "Name",
                            render: function (data, type, category) {
                                return "<button style='color:#d36e25;' class='btn-link jsModify' data-categoryID=" + category.CategoryID + ">" + data + "</button>";
                            }
                        },
                        {
                            title: "",
                            data: "CategoryID",
                            render: function (data) {
                                return "<button style='color:white;' class='btn-warning jsDelete' data-categoryID= " + data + ">Delete</button>";
                            }
                        },
                    ];
                    table = CreateNewDataTable("#categories", "/api/Categories", columns);

                    ///////////////Category management event handlers//////
                    //click a single row --> change back-ground color
                    $("#categories tbody").on("click", "tr", function () {
                        if ($(this).hasClass('selected')) {
                            $(this).removeClass('selected');
                        }
                        else {
                            table.$('tr.selected').removeClass('selected');
                            $(this).addClass('selected');
                        }
                    });

                    //open category dialog for adding a new category
                    $("#addNewCateg").on("click", function () {

                        CreateNewCategoryDialogBootBox("Adding a new category", table, "add", null);

                    });

                    //open category dialog for modify an exist category
                    $("#categories").on("click", ".jsModify", function () {
                        var button = $(this);

                        CreateNewCategoryDialogBootBox("modify category " + button.attr("data-categoryID") + ". " + button.text(), table, "modify", button.attr("data-categoryID"));

                    });

                    //delete a specific row in dataTable
                    $("#categories").on("click", ".jsDelete", function () {
                        var button1 = $(this);

                        $.ajax({
                            url: "/api/Categories?id=" + button1.attr("data-categoryID"),
                            method: "Get",
                            success: function (response) {
                                if (response.IsHavingBook) {
                                    bootbox.alert("You can not delete this category, because some products base on it.");
                                } else {
                                    bootbox.confirm("Are you sure you want to delete category " + button1.attr("data-categoryID"), function (result) {
                                        if (result) {
                                            $.ajax({
                                                url: "/api/Categories?id=" + button1.attr("data-categoryID"),
                                                method: "Delete",
                                                success: function () {
                                                    table.row(button1.parents("tr")).remove().draw();
                                                }
                                            });
                                        }
                                    });
                                }
                            }
                        });
                    });
                });

                function CreateNewDataTable(idOfTable, urlToApi, columns) {
                    var table = $(idOfTable).DataTable({
                        ajax: {
                            url: urlToApi,
                            dataSrc: "",
                        },
                        columns: columns,
                        scrollY: 280,
                        scrollX: false,
                        scroller: true,
                        deferRender: true,
                    });

                    return table;
                }

                jQuery.fn.serializeJSON = function () {
                    var json = {};

                    jQuery.map(jQuery(this).serializeArray(), function (n) {
                        var _ = n.name.indexOf('[');

                        if (_ > -1) {
                            var o = json,
                                _name;

                            _name = n.name.replace(/\]/gi, '').split('[');

                            for (var i = 0, len = _name.length; i < len; i++) {
                                if (i == len - 1) {
                                    if (o[_name[i]]) {
                                        if (typeof o[_name[i]] == 'string') {
                                            o[_name[i]] = [o[_name[i]]];
                                        }

                                        o[_name[i]].push(n.value);
                                    } else {
                                        o[_name[i]] = n.value || '';
                                    }
                                } else {
                                    o = o[_name[i]] = o[_name[i]] || {};
                                }
                            }
                        } else if (json[n.name] !== undefined) {
                            if (!json[n.name].push) {
                                json[n.name] = [json[n.name]];
                            }

                            json[n.name].push(n.value || '');
                        } else {
                            json[n.name] = n.value || '';
                        }
                    });

                    return json;
                };

                function CreateNewCategoryDialogBootBox(title, table, mode, categoryID) {

                    var dialogCategory = bootbox.dialog({
                        message: $("#dialogCategory").html(),
                        title: title,
                        buttons: [{
                            label: "Save",
                            className: "btn btn-warning pull-left dialogCategory-bootbox-ok-button",
                            callback: function () {
                                var form = dialogCategory.find("#formCategory");
                                var items = form.serializeJSON();

                                form.validate({
                                    rules: {
                                        name: {
                                            required: true,
                                            checkUniqueNameOfCategory: true,
                                            maxlength: 50,
                                        },
                                    },
                                    messages: {
                                        name: {
                                            required: "Name is required !!!",
                                        }
                                    },
                                });

                                if (form.valid() == false)
                                    return false;

                                if (mode === "add") {
                                    $.ajax({
                                        url: "/api/Categories",
                                        method: "Post",
                                        data: {
                                            cate_name: items.name,
                                        },
                                        success: function (response) {
                                            var trDOM = table.row.add({
                                                CategoryID: response.CategoryID,
                                                Name: response.Name,
                                            }).draw(false).node();


                                            $(trDOM).attr("id", "added");
                                            $(trDOM).addClass("selected");
                                            var row = table.row("#added");
                                            row.scrollTo();

                                            var $rowToScroll = $(trDOM);
                                            $('html, body').animate({ scrollTop: $rowToScroll.offset().top }, 2000);

                                            $(trDOM).removeAttr("id");
                                        },
                                    });
                                }
                                else if (mode === "modify") {
                                    $.ajax({
                                        url: "/api/Categories",
                                        method: "Put",
                                        data: {
                                            cate_id: categoryID,
                                            cate_name: items.name,
                                        },
                                        success: function (response) {
                                            var indexes = table.rows().eq(0).filter(function (rowIdx) {
                                                return table.cell(rowIdx, 0).data() === response.CategoryID;
                                            });

                                            var newData = table.row(indexes[0]).data();
                                            newData.Name = items.name;
                                            table.row(indexes[0]).data(newData).draw();
                                        },
                                    });
                                }

                                dialogCategory.modal('hide');

                                return false;
                            }
                        }, {
                            label: "Close",
                            className: "btn btn-default pull-left",
                            callback: function () {

                            }
                        }],
                        show: false,
                        onEscape: function () {
                            dialogCategory.modal("hide");
                        }
                    });

                    dialogCategory.modal("show");
                };

                jQuery.validator.addMethod("checkUniqueNameOfCategory", function (value) {
                    var isValid = true;
                    $.ajax({
                        url: "/api/Categories",
                        method: "Get",
                        async: false,
                        success: function (response) {
                            for (var i = 0; i < response.length; i++) {
                                if (response[i].Name == value) {
                                    isValid = false;
                                }
                            }
                        }
                    });
                    return isValid;
                }, "This data already exists!");

            </script>

        @*</div>

    </div>

</body>
</html>*@
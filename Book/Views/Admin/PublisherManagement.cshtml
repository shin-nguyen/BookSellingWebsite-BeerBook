@using Book.Models
@model Book.Models.dbbookEntities


@{
    ViewBag.Title = "PUBLISHER MANAGEMENT";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<meta name="viewport" content="width=device-width" />
<title>Admin - Category</title>
<link href="~/Content/bootstrap.css" rel="stylesheet" />
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" type="text/css" href="~/Content/DataTables/css/dataTables.bootstrap.css" />
<link href="https://cdn.jsdelivr.net/npm/jquery-smarttab@3/dist/css/smart_tab_all.min.css" rel="stylesheet" type="text/css" />

<br />

<div id="PublisherManagement" class="form-group">
    <div>
        <button id="addNewPublisher" class="btn btn-default" style="background-color:#d36e25; color:white">New Publisher</button>
    </div>
    <div>
        <table id="publishers" class="table	table-bordered	table-hover">
            <thead>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <div id="dialogPublisher" class="form-group table-bordered" style="display:none;">
        <form id="formPublisher" role="form">
            <div class="form-group">
                <label for="name">Name:</label>
                <input id="publishers-name" class="form-control" name="name" type="text" placeholder="Enter name">
            </div>
        </form>
    </div>
</div>

<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/bootstrap.js"></script>
<script src="~/Scripts/bootbox.js"></script>
<script src="~/Scripts/DataTables/jquery.dataTables.js"></script>
<script src="~/Scripts/DataTables/dataTables.bootstrap.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-smarttab@3/dist/js/jquery.smartTab.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-ui.js"></script>
<script src="~/Scripts/DataTables/dataTables.scroller.js"></script>
<script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.1/jquery.validate.min.js"></script>

<script>
    $(document).ready(function () {
        var table;
        var columns = [
            {
                title: "Publisher's ID",
                data: "PublisherID",
                render: function (data) {
                    return data;
                }
            },
            {
                title: "Publisher's Name",
                data: "Name",
                render: function (data, type, publisher) {
                    return "<button style='color:#d36e25;' class='btn-link jsModify' data-publisherID=" + publisher.PublisherID + ">" + data + "</button>";
                }
            },
            {
                title: "",
                data: "PublisherID",
                render: function (data) {
                    return "<button style='color:white;' class='btn-warning jsDelete' data-publisherID= " + data + ">Delete</button>";
                }
            },
        ];
        table = CreateNewDataTable("#publishers", "/api/Publishers", columns);

        ///////////////Publisher management event handlers//////
        //click a single row --> change back-ground color
        $("#publishers tbody").on("click", "tr", function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            }
            else {
                table.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });

        //open publisher dialog for adding a new publisher
        $("#addNewPublisher").on("click", function () {

            CreateNewPublisherDialogBootBox("Adding a new publisher", table, "add", null);

        });

        //open publisher dialog for modify an exist publisher
        $("#publishers").on("click", ".jsModify", function () {
            var button = $(this);

            CreateNewPublisherDialogBootBox("modify publisher " + button.attr("data-publisherID") + ". " + button.text(), table, "modify", button.attr("data-publisherID"));

        });

        //delete a specific row in dataTable
        $("#publishers").on("click", ".jsDelete", function () {
            var button1 = $(this);

            $.ajax({
                url: "/api/Publishers?id=" + button1.attr("data-publisherID"),
                method: "Get",
                success: function (response) {
                    if (response.IsHavingBook) {
                        bootbox.alert("You can not delete this publisher, because some products base on it.");
                    } else {
                        bootbox.confirm("Are you sure you want to delete publisher " + button1.attr("data-publisherID"), function (result) {
                            if (result) {
                                $.ajax({
                                    url: "/api/Publishers?id=" + button1.attr("data-publisherID"),
                                    method: "Delete",
                                    success: function () {
                                        table.row(button1.parents("tr")).remove().draw();
                                    }
                                });
                            }
                        });
                    }
                }
            });
        });
    });

    function CreateNewDataTable(idOfTable, urlToApi, columns) {
        var table = $(idOfTable).DataTable({
            ajax: {
                url: urlToApi,
                dataSrc: "",
            },
            columns: columns,
            scrollY: 280,
            scrollX: false,
            scroller: true,
            deferRender: true,
        });

        return table;
    }

    jQuery.fn.serializeJSON = function () {
        var json = {};

        jQuery.map(jQuery(this).serializeArray(), function (n) {
            var _ = n.name.indexOf('[');

            if (_ > -1) {
                var o = json,
                    _name;

                _name = n.name.replace(/\]/gi, '').split('[');

                for (var i = 0, len = _name.length; i < len; i++) {
                    if (i == len - 1) {
                        if (o[_name[i]]) {
                            if (typeof o[_name[i]] == 'string') {
                                o[_name[i]] = [o[_name[i]]];
                            }

                            o[_name[i]].push(n.value);
                        } else {
                            o[_name[i]] = n.value || '';
                        }
                    } else {
                        o = o[_name[i]] = o[_name[i]] || {};
                    }
                }
            } else if (json[n.name] !== undefined) {
                if (!json[n.name].push) {
                    json[n.name] = [json[n.name]];
                }

                json[n.name].push(n.value || '');
            } else {
                json[n.name] = n.value || '';
            }
        });

        return json;
    };

    function CreateNewPublisherDialogBootBox(title, table, mode, publisherID) {

        var dialogPublisher = bootbox.dialog({
            message: $("#dialogPublisher").html(),
            title: title,
            buttons: [{
                label: "Save",
                className: "btn btn-warning pull-left dialogPublisher-bootbox-ok-button",
                callback: function () {
                    var form = dialogPublisher.find("#formPublisher");
                    var items = form.serializeJSON();

                    form.validate({
                        rules: {
                            name: {
                                required: true,
                                checkUniqueNameOfPublisher: true,
                                maxlength: 50,
                            },
                        },
                        messages: {
                            name: {
                                required: "Name is required !!!",
                            }
                        },
                    });

                    if (form.valid() == false)
                        return false;

                    if (mode === "add") {
                        $.ajax({
                            url: "/api/Publishers",
                            method: "Post",
                            data: {
                                pu_name: items.name,
                            },
                            success: function (response) {
                                var trDOM = table.row.add({
                                    PublisherID: response.PublisherID,
                                    Name: response.Name,
                                }).draw(false).node();


                                $(trDOM).attr("id", "added");
                                $(trDOM).addClass("selected");
                                var row = table.row("#added");
                                row.scrollTo();

                                var $rowToScroll = $(trDOM);
                                $('html, body').animate({ scrollTop: $rowToScroll.offset().top }, 2000);

                                $(trDOM).removeAttr("id");
                            },
                        });
                    }
                    else if (mode === "modify") {
                        $.ajax({
                            url: "/api/Publishers",
                            method: "Put",
                            data: {
                                pu_id: publisherID,
                                pu_name: items.name,
                            },
                            success: function (response) {
                                var indexes = table.rows().eq(0).filter(function (rowIdx) {
                                    return table.cell(rowIdx, 0).data() === response.PublisherID;
                                });

                                var newData = table.row(indexes[0]).data();
                                newData.Name = items.name;
                                table.row(indexes[0]).data(newData).draw();
                            },
                        });
                    }

                    dialogPublisher.modal('hide');

                    return false;
                }
            }, {
                label: "Close",
                className: "btn btn-default pull-left",
                callback: function () {

                }
            }],
            show: false,
            onEscape: function () {
                dialogPublisher.modal("hide");
            }
        });

        dialogPublisher.modal("show");
    };

    jQuery.validator.addMethod("checkUniqueNameOfPublisher", function (value) {
        var isValid = true;
        $.ajax({
            url: "/api/Publishers",
            method: "Get",
            async: false,
            success: function (response) {
                for (var i = 0; i < response.length; i++) {
                    if (response[i].Name == value) {
                        isValid = false;
                    }
                }
            }
        });
        return isValid;
    }, "This data already exists!");

</script>

